Core classes, functions, and methods:

1. `Scraper`: A class that handles the scraping of the VirusTotal documentation using Puppeteer.
   - `constructor`: Initializes the Puppeteer browser and page instances.
   - `navigateTo`: Navigates to a given URL.
   - `scrape`: Scrapes the documentation and returns the OpenAPI JSON structure.
   - `close`: Closes the Puppeteer browser instance.

2. `OpenAPIBuilder`: A class that builds the OpenAPI JSON structure from the scraped data.
   - `constructor`: Initializes the OpenAPI JSON structure.
   - `addCategory`: Adds a category to the OpenAPI JSON structure.
   - `addEndpoint`: Adds an endpoint to a category in the OpenAPI JSON structure.
   - `getSpecification`: Returns the OpenAPI JSON structure.

3. `main`: The entry point function that initializes the `Scraper` and `OpenAPIBuilder` instances, scrapes the documentation, and outputs the OpenAPI JSON structure.

Now, I will provide the code for each file.

package.json
```json
{
  "name": "virustotal-openapi-scraper",
  "version": "1.0.0",
  "description": "Scraper to convert VirusTotal online documentation to OpenAPI specifications",
  "main": "index.ts",
  "scripts": {
    "start": "ts-node index.ts"
  },
  "dependencies": {
    "puppeteer": "^13.0.0",
    "ts-node": "^10.4.0",
    "typescript": "^4.5.4"
  }
}
```

tsconfig.json
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "outDir": "dist"
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
```

index.ts
```typescript
import { Scraper } from './scraper';
import { OpenAPIBuilder } from './openapi-builder';

async function main() {
  const scraper = new Scraper();
  const openAPIBuilder = new OpenAPIBuilder();

  await scraper.navigateTo('https://developers.virustotal.com/reference/overview');
  const scrapedData = await scraper.scrape();
  await scraper.close();

  for (const category of scrapedData.categories) {
    openAPIBuilder.addCategory(category);

    for (const endpoint of category.endpoints) {
      openAPIBuilder.addEndpoint(category.name, endpoint);
    }
  }

  const openAPISpecification = openAPIBuilder.getSpecification();
  console.log(JSON.stringify(openAPISpecification, null, 2));
}

main();
```

scraper.ts
```typescript
import puppeteer, { Browser, Page } from 'puppeteer';

export interface Category {
  name: string;
  endpoints: Endpoint[];
}

export interface Endpoint {
  name: string;
  path: string;
  method: string;
  description: string;
  parameters: Parameter[];
}

export interface Parameter {
  name: string;
  in: string;
  description: string;
  required: boolean;
  schema: {
    type: string;
  };
}

export class Scraper {
  private browser: Browser;
  private page: Page;

  constructor() {
    this.browser = null;
    this.page = null;
  }

  async navigateTo(url: string) {
    this.browser = await puppeteer.launch();
    this.page = await this.browser.newPage();
    await this.page.goto(url);
  }

  async scrape(): Promise<{ categories: Category[] }> {
    // Implement the scraping logic here using Puppeteer
    // Return the scraped data as an object with a "categories" property
  }

  async close() {
    await this.browser.close();
  }
}
```

openapi-builder.ts
```typescript
import { Category, Endpoint } from './scraper';

export class OpenAPIBuilder {
  private openAPI: any;

  constructor() {
    this.openAPI = {
      openapi: '3.0.0',
      info: {
        title: 'VirusTotal API',
        version: '1.0.0',
      },
      paths: {},
    };
  }

  addCategory(category: Category) {
    // Add the category to the OpenAPI JSON structure
  }

  addEndpoint(categoryName: string, endpoint: Endpoint) {
    // Add the endpoint to the specified category in the OpenAPI JSON structure
  }

  getSpecification() {
    return this.openAPI;
  }
}
```

To run the scraper, first install the dependencies with `npm install`, and then execute `npm start`.